{% if template == 'product' %}

  <form id="offer-your-price-form">
    <div id="price-options-container"></div>  
      <input 
      type="number" 
      id="price-input" 
      style=" outline:auto" 
      class="product-form__submit button button--full-width button--secondary"
      name="properties[__custom_price]" 
      placeholder="Enter your price" 
      step="0.01" 
      />
      <button type="submit" id="appcart_button" class="product-form__submit button button--full-width button--secondary">Add to cart</button>
  </form>
  

{% endif %}
<link rel="stylesheet" type="text/css" href="/assets/styles.css">
<style>
    :root {
    --price-options-background-color: {{ block.settings.price_options_background_color }};
    --price-options-text-color: {{ block.settings.price_options_text_color }};
  }
</style>

<script>
  console.log("Offer Your Price is Running");
  document.addEventListener("DOMContentLoaded", () => {

    const template = "{{ template }}";
    console.log("Template: " +  template);
    const variantMetafields = {
      {% for variant in product.variants %}
        {{ variant.id }}: {
          available: {{variant.available}},
          orignalPrice: "{{variant.price |  money_with_currency}}",
          salePrice: "{{ variant.compare_at_price | divided_by: 100.0 }}",
          displaySalePrice: "{{ variant.compare_at_price |  money_with_currency }}",
          minPrice: "{{ variant.metafields.objects.minimum_acceptable_price }}",
          maxPrice: "{{ variant.metafields.objects.maximum_acceptable_price }}",
          suggestedPrice: "{{ variant.metafields.objects.suggested_price }}",
          payYourPriceEnable: {{ variant.metafields.objects.enable_offer_your_price | default: false }},
          enablePayYourPriceOption: {{ variant.metafields.objects.enable_price_options | default: false }},
          priceOptions: {{ variant.metafields.objects.predefined_price_option | default: "[]" }},
          displayMaxPrice: "{{ variant.metafields.objects.maximum_acceptable_price | times: 100 | money_with_currency }}",
          displaySuggestedPrice: "{{ variant.metafields.objects.suggested_price | times: 100 | money_with_currency }}",
          displayMinPrice: "{{ variant.metafields.objects.minimum_acceptable_price | times: 100 | money_with_currency }}"
        }{% if forloop.last == false %},{% endif %}
      {% endfor %}
    };
    
    console.log(variantMetafields);  // Console log to check variant data
    const showSuggestedPrice = "{{ block.settings.show_suggested_price}}";
    const suggestedPriceLabel = "{{ block.settings.suggested_price_label | default: "Suggested Price" }}";
    const addToCartButton = document.querySelector("#appcart_button");
    const submitBtn = document.querySelector(".product-form__buttons > .product-form__submit");
    const form = document.getElementById("offer-your-price-form");
    let priceInput = document.getElementById("price-input");
    const errorMessageWrapper = document.querySelector(".product-form__error-message-wrapper");
    const errorMessage = document.querySelector(".product-form__error-message");
    const updateData = (id) => {
      console.log("Variant Changes") ;
      const isAvailable = variantMetafields[id]['available'];
      // const orignalPrice = variantMetafields[id]['orignalPrice'];
      const isEnable  = variantMetafields[id]['payYourPriceEnable'];
      const minPrice = variantMetafields[id]['minPrice'];
      const maxPrice = variantMetafields[id]['maxPrice'];
      const comparePrice = variantMetafields[id]['salePrice'];
      const displayComparePrice = variantMetafields[id]['displaySalePrice'];
      const displayMinPrice = variantMetafields[id]['displayMinPrice'];
      const displayMaxPrice = variantMetafields[id]['displayMaxPrice'];
      const suggestedPrice = variantMetafields[id]['suggestedPrice'];
      const displaySuggestedPrice = variantMetafields[id]['displaySuggestedPrice'];
      const priceOptionsContainer = document.querySelector("#price-options-container");
      const qtyInput = document.getElementsByClassName("product-form__quantity")[0];
      const priceContainer = document.getElementsByClassName("price__regular")[0];
      const shopifyCartForm = document.querySelector('product-form .form');
      let officialPrice = document.querySelector(".price-item--regular");;
      const salePrice = document.querySelector(".price__sale");
      const regularPrice = document.querySelector(".price__regular");
      regularPrice.classList.remove('price-item--regular');
      regularPrice.classList.add('offer-your-price-price');
      salePrice.style.display = "none";
      const saleBadge = document.querySelector(".price__badge-sale");
      const soldoutBadge = document.querySelector(".price__badge-sold-out");
      saleBadge.style.display = "none";
      soldoutBadge.style.display = "none";
      if(!isAvailable){
        soldoutBadge.style.display = "inline-block";
      }
      if (parseFloat(comparePrice) > 0) {
        saleBadge.style.display = "inline-block";
      }
      console.log("isEnabled:", isEnable);  // Debugging log
      errorMessageWrapper.hidden = true;
      if (isEnable && isAvailable) {
        shopifyCartForm.style.display = "none";
        shopifyCartForm.appendChild(form);

        let customPriceInput = document.getElementById("custom_property_price");
        if (!customPriceInput) {
          customPriceInput = document.createElement("input");
          customPriceInput.type = "hidden";
          customPriceInput.name = "properties[__custom_price]";
          customPriceInput.id = "custom_property_price";
          customPriceInput.value = 0;
          shopifyCartForm.appendChild(customPriceInput);
        } else {
          customPriceInput.value = 0;
        }

        let isValidInput = document.querySelector('product-form .form input[name="properties[__isValid]"]');
        if (!isValidInput) {
          isValidInput = document.createElement("input");
          isValidInput.type = "hidden";
          isValidInput.name = "properties[__isValid]";
          isValidInput.value = variantMetafields[id]['payYourPriceEnable'];

          shopifyCartForm.appendChild(isValidInput);
        } else {
          isValidInput.value = true;
        }

        if (qtyInput) {
          errorMessageWrapper.parentNode.insertBefore(form, errorMessageWrapper);
          if (parseFloat(minPrice.trim()) > 0 && parseFloat(maxPrice.trim()) > 0 && parseFloat(maxPrice) > parseFloat(minPrice)) {
            
            officialPrice.innerHTML = `${displayMinPrice} - ${displayMaxPrice}`;
            saleBadge.style.display = "none";
            if (showSuggestedPrice === "true" && parseFloat(variantMetafields[id].suggestedPrice) > 0) {
              officialPrice.innerHTML += ` <br> ${suggestedPriceLabel}: ${displaySuggestedPrice}`;
            }
            if (variantMetafields[id].enablePayYourPriceOption && variantMetafields[id].priceOptions.length > 0 && variantMetafields[id].minPrice.trim().length > 0 ) {
              console.log("Price Options Available"); // Debugging log
              priceInput.style.display = 'none';
              addToCartButton.style.display = 'block';
              priceOptionsContainer.innerHTML = "";
              const uniquePriceOptions = new Set(variantMetafields[id].priceOptions);
              uniquePriceOptions.forEach((option, index) => {
                const input = document.createElement('input');
                input.type = 'radio';
                input.name = 'priceOption';
                input.id = `price-option-${index}`;
                input.value = option;
                input.style.display = 'none';

                const label = document.createElement('label');
                label.setAttribute('for', input.id);
                label.classList.add('price-pill');
                let optionPrice = "{{ cart.currency.symbol }}";
                label.textContent = `${optionPrice}${option} `;

                input.addEventListener('change', () => {
                  errorMessageWrapper.hidden = true;
                  errorMessage.textContent = "";
                  priceInput.style.display = 'none';
                  customPriceInput.style.display = 'none';
                  priceOptionsContainer.querySelectorAll('.price-pill').forEach(label => label.classList.remove('selected'));
                  label.classList.add('selected');
                });

                priceOptionsContainer.appendChild(input);
                priceOptionsContainer.appendChild(label);
              });

              const otherInput = document.createElement('input');
              otherInput.type = 'radio';
              otherInput.name = 'priceOption';
              otherInput.id = 'price-option-other';
              otherInput.value = 'other';
              otherInput.style.display = 'none';

              const otherLabel = document.createElement('label');
              otherLabel.setAttribute('for', otherInput.id);
              otherLabel.classList.add('price-pill');
              otherLabel.textContent = 'Other';
              otherInput.addEventListener('change', () => {
                errorMessageWrapper.hidden = true;
                errorMessage.textContent = "";
                priceInput.style.display = 'block';  
                priceOptionsContainer.querySelectorAll('.price-pill').forEach(label => {
                  label.classList.remove('selected');  
                });
                otherLabel.classList.add('selected');
              });
              priceOptionsContainer.appendChild(otherInput);
              priceOptionsContainer.appendChild(otherLabel);
            } else {
              priceInput.style.display = 'block';
              addToCartButton.style.display = 'block';
              priceOptionsContainer.innerHTML = "";
            }
          } else {
            
            if (parseFloat(comparePrice) > 0) {
              officialPrice.innerHTML = `<span class="underline">${displayComparePrice}</span> ${variantMetafields[id]['orignalPrice']}`;
              
              
            } else {
                officialPrice.innerHTML = `${variantMetafields[id]['orignalPrice']}`;
               
            }


            showError("Please set valid min and max prices in the admin panel. Max price should be less than min price.");

            if (priceInput && addToCartButton) {
              priceOptionsContainer.innerHTML = "";
              addToCartButton.style.display = 'none';
            }
          }
          document.querySelector("product-form").addEventListener("submit", (event) => {
            console.log("Shopify Product Form Submission Intercepted");
            event.preventDefault();
            event.stopImmediatePropagation();

            const selectedVariantId = document.querySelector("[name='id']")?.value; // Get selected variant ID
            console.log("Selected Variant ID:", selectedVariantId);

            if (!selectedVariantId || !variantMetafields[selectedVariantId]) {
                console.log("Invalid variant or metafield missing.");
                showError("Invalid variant selection.");
                return false;
            }

            const currentSelectedVariantData = variantMetafields[selectedVariantId];
            console.log("Current Variant Metafields:", currentSelectedVariantData);

            let inputValue = false;
            if (currentSelectedVariantData.enablePayYourPriceOption && currentSelectedVariantData.priceOptions.length) {
                const selectedOption = document.querySelector('input[name="priceOption"]:checked');
                
                if (selectedOption?.value === "other") {
                    inputValue = priceInput.value.trim() ? parseFloat(priceInput.value) : 0;
                    isValidInput.value = inputValue > 0;
                } else {
                    inputValue = parseFloat(selectedOption?.value) || 0;
                    isValidInput.value = !!selectedOption;
                }
            } else {
                inputValue = priceInput.value.trim() ? parseFloat(priceInput.value) : 0;
                isValidInput.value = inputValue > 0;
            }

            if (isNaN(inputValue) || inputValue < currentSelectedVariantData.minPrice || inputValue > currentSelectedVariantData.maxPrice) {
                console.log("Invalid price detected, blocking submission.");
                showError(`Please enter a price between ${currentSelectedVariantData.displayMinPrice} and ${currentSelectedVariantData.displayMaxPrice}.`);
                return false;
            }

            console.log("Valid price, allowing Shopify add-to-cart.");
            
            const customValue = document.getElementById("custom_property_price");
            customValue.value = inputValue;

            const submitButton = document.querySelector('.product-form__buttons button[type="submit"]');
            if (submitButton && !submitButton.disabled) {
                submitButton.click();
            }
        });
    }
      }
      else{
        if (parseFloat(comparePrice) > 0) {
          officialPrice.innerHTML = `<span class="underline">${displayComparePrice}</span> ${variantMetafields[id]['orignalPrice']}`;
          
          
        } else {
            officialPrice.innerHTML = `${variantMetafields[id]['orignalPrice']}`;
           
        }

        shopifyCartForm.style.display = "block";
        addToCartButton.style.display = 'none';
        priceInput.style.display = "none";
        errorMessageWrapper.hidden = true;
        errorMessage.textContent = "";
        priceOptionsContainer.innerHTML = "";
        console.log("Is not a valid");
      }
    }

    function showError(message) {
      // document.querySelector("#price-input").style.display = "none";
      // document.querySelector("#price-input").value = "";
      errorMessage.textContent = message;
      errorMessageWrapper.hidden = false;
    }
    const selectElement = document.querySelectorAll('.select__select');
    const variantRadios = document.querySelectorAll('input[type="radio"]');

    variantRadios.forEach(radio => {
      radio.addEventListener('change', (event) => {
        event.stopPropagation();
        console.log({{product | json}});
            document.querySelector("#price-input").style.display = "none";
      document.querySelector("#price-input").value = "";
    
        const selectedValues = [];

        const checkedRadios = document.querySelectorAll('variant-selects input[type="radio"]:checked');

        checkedRadios.forEach(radio => {
          selectedValues.push(radio.value);
        });

        const combinedValue = selectedValues.length > 1 ? selectedValues.join(' / ') : selectedValues[0];

        console.log(combinedValue);

        const variantId = event.target.getAttribute('value');
        const variants = {{ product.variants | json }};
        console.log(variants);

        const selectedVariant = variants.find(variant => variant.public_title.trim() == combinedValue.trim());

        if (selectedVariant) {
          console.log("Selected variant: " + selectedVariant.id);
          console.log(combinedValue.trim());
          document.querySelector('input[name="id"]').value = selectedVariant.id;
          updateData(selectedVariant.id);
        }
      });
    });


    {% if template == 'product' %}
      console.log(variantRadios);
      console.log({{ product.available | json }});

      const currentProduct = document.querySelector('input[name="id"]').value;
      // const priceInput = document.querySelector("#price-input"); // Ensure priceInput is selected correctly

      if (priceInput) {
        priceInput.style.display = "none";
      }

      updateData(currentProduct);

      {% elsif template == 'collection' %}
       const CollectionMetafields = {};

{% for product in collection.products %}
    // const titleofProd = "{{ product.title | escape }}".trim(); // Ensure title is clean
    CollectionMetafields["{{product.title}}"] = {
      title: "{{ product.title }}",
      available: {{ product.selected_or_first_available_variant.available | json }},
      originalPrice: "{{ product.selected_or_first_available_variant.price | money_with_currency }}",
      salePrice: "{{ product.selected_or_first_available_variant.compare_at_price | divided_by: 100.0 }}",
      displaySalePrice: "{{ product.selected_or_first_available_variant.compare_at_price | money_with_currency }}",
      minPrice: "{{ product.selected_or_first_available_variant.metafields.objects.minimum_acceptable_price | default: 0 }}",
      maxPrice: "{{ product.selected_or_first_available_variant.metafields.objects.maximum_acceptable_price | default: 0 }}",
      suggestedPrice: "{{ product.selected_or_first_available_variant.metafields.objects.suggested_price | default: 0 }}",
      payYourPriceEnable: {{ product.selected_or_first_available_variant.metafields.objects.enable_offer_your_price | default: false | json }},
      enablePayYourPriceOption: {{ product.selected_or_first_available_variant.metafields.objects.enable_price_options | default: false | json }},
      priceOptions: {{ product.selected_or_first_available_variant.metafields.objects.predefined_price_option | default: "[]" | json }},
      displayMaxPrice: "{{ product.selected_or_first_available_variant.metafields.objects.maximum_acceptable_price | times: 100 | money_with_currency }}",
      displaySuggestedPrice: "{{ product.selected_or_first_available_variant.metafields.objects.suggested_price | times: 100 | money_with_currency }}",
      displayMinPrice: "{{ product.selected_or_first_available_variant.metafields.objects.minimum_acceptable_price | times: 100 | money_with_currency }}"
    };
{% endfor %}

console.log("Template is collection",);

document.querySelectorAll(".card__content").forEach((card) => {
  const titleElement = card.querySelector(".card__heading a");
  const priceElement = card.querySelector(".price-item--regular");

  if (titleElement && priceElement) {
    const productTitle = titleElement.innerText.trim();
    const productData = CollectionMetafields[productTitle];

    console.log(`Checking: ${productTitle}`, productData);

    if (productData) {
      if (productData.payYourPriceEnable && productData.available) {
        console.log(`Updating price for: ${productTitle}`);
        priceElement.textContent = productData.displayMinPrice + " - " + productData.displayMaxPrice;
      }else if (productData.available && productData.salePrice > 0 ){
        priceElement.innerHTML = `<span class="underline">${productData.originalPrice}</span> ${productData.displaySalePrice}`;
      }
       else {
        console.log(`No change for ${productTitle} (payYourPriceEnable is false)`);
      }
    } else {
      console.log(`Product not found in CollectionMetafields: ${productTitle}`);
    }
  } else {
    console.log("Missing titleElement or priceElement in some cards.");
  }
});
{% endif %}

  });
  </script>

{{ 'styles.css' | asset_url | stylesheet_tag }}


{% schema %}
  {
    "name": "Offer Your Price",
    "target": "body",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_suggested_price",
        "label": "Show Suggested Price",
        "info": "Enable this option to display the suggested price on your product pages."
      },
      {
        "type": "text",
        "id": "suggested_price_label",
        "label": "Suggested Price Label",
        "default": "Suggested Price"
      },
      {
        "type": "color",
        "id": "price_options_background_color",
        "label": "Price Options Background Color",
        "default": "#ffffff"
      },
      {
        "type": "color",
        "id": "price_options_text_color",
        "label": "Price Options Text Color",
        "default": "#000000"
      }
    ]
  }
  {% endschema %}
  
